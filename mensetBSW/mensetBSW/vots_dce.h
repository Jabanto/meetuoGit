#pragma once
/************************************************
 * This file was generated by <constconv v2.8.1.43>
 * from .\..\..\..\..\source\basis\vots\src\vots_dce.h
 * at 20.06.2018 11:02:37
 * by ASL_100
 * Please, do not edit this file.
 ************************************************/

 /*
  * Copyright ©2001, WITRON Logistik + Informatik GmbH
  * International copyright is claimed for this unpublished
  * work in Germany, the U.S. and elsewhere under international
  * treaties and other agreements.
  *
  * File:        $Archive: /asl/source/basis/vots/src/vots_dce.h $
  * Copyright:   WITRON Logistik + Informatik GmbH
  * Projekt:     ASL VOTS
  * Description:
  * Version:     $Revision: 9 $
  * Authors:     Ingolf Eick
  * Create:      05-Jun-2018
  *
  * Classes:
  *
 */
#ifndef VOTS_DCE_H
#define VOTS_DCE_H 1

 /* [only NET] namespace Witron.Asl.Basis.Vots */
 /*
  * Externe Referenzen
 */
#if !defined(IDL_COMPILER)
#include "sbi_if.h"
//#include "log_if.h"
//#include "pco_typ.h"
#endif /* !defined(IDL_COMPILER) */

/*
* basic definitions
*/
#define VOTS_OK                            0
#define VOTS_NOK                          -1 /* error                    */
#define VOTS_ERR_VERSION                  -2 /* wrong shm version        */
#define VOTS_ERR_LINE_BUSY                -3 /* line used                */
#define VOTS_ERR_WRONG_LINE               -4 /* wrong line index         */
#define VOTS_ERR_LINE_UNUSED              -5 /* line not used            */
#define VOTS_ERR_WRONG_PARAM              -6 /* bad parameter            */
#define VOTS_ERR_MEMORY                   -7 /* memory error             */
#define VOTS_ERR_ADDR_CONV                -8 /* wrong sps address        */
#define VOTS_ERR_INITIALIZED              -9 /* */
#define VOTS_ERR_NOT_INITIALIZED         -10 /* not initialized          */
#define VOTS_ERR_SIMULATION_ACTIVE       -11 /* */
#define VOTS_ERR_SHM_OPEN                -12 /* shm not open             */
#define VOTS_ERR_SHM_ACCESS              -13 /* shm access error         */
#define VOTS_ERR_SHM_CLOSED              -14 /* no shm                   */
#define VOTS_ERR_THREAD                  -15 /* thread error             */
#define VOTS_ERR_TRANS_OPEN              -16 /* connect error            */
#define VOTS_ERR_TRANS_ACCESS            -17	/* fatal error              */
#define VOTS_ERR_TRANS_TIMEOUT           -18 /* send timeout             */
#define VOTS_ERR_TRANS_DISCONNECT        -19	/* connection disconnected  */
#define VOTS_ERR_PARAM_FILE              -20 /* ini file not read        */
#define VOTS_ERR_LOG_FILE                -21 /* log file not open        */
#define VOTS_ERR_SHM_FLUSH               -22 /* */

#define VOTS_VERSION                  290595 /* shm struct version       */
#define VOTS_NAME_LEN                     17 /* sizeoff name             */
#define VOTS_ADDR_LEN                     33 /* sizeof sps address       */
#define VOTS_ERROR_LEN                   257 /* max size of err message  */
#define VOTS_FNAME_LEN                   257 /* Laenge eines Dateinamens  */
#define VOTS_IP_START_LEN                  8 /* max length of Start/Stop String   */

#define VOTS_MSG_LINE                      0 /* normal message           */
#define VOTS_MSG_LINE_MORE                 1 /* normal message, more data*/
#define VOTS_MSG_SIM_RECEIVE               2 /* simulated message send   */
#define VOTS_MSG_SIM_SEND                  3 /* simulated message receive*/
#define VOTS_MSG_TIMEOUT                   4 /* timeout, no message      */
#define VOTS_MSG_EVENT                     5 /* extern wakeup            */
#define VOTS_MSG_LEN                    4001 /* max message size old:1025*/

#define VOTS_MSG_STATUS_NONE               0 /* initialized              */
#define VOTS_MSG_STATUS_TIMEOUT            1 /* timeout                  */
#define VOTS_MSG_STATUS_LINE               2 /* sps message              */
#define VOTS_MSG_STATUS_SIM_SEND           3 /* sim send message         */
#define VOTS_MSG_STATUS_SIM_RECV           4 /* sim receive message      */

#define VOTS_PROTOKOLL_OFF                 0 /* message protocol off     */
#define VOTS_PROTOKOLL_ON                  1 /* message protocol on      */
#define VOTS_PROTOKOLL_80                 80 /* width  80                */
#define VOTS_PROTOKOLL_132               132 /* width 132                */

#define VOTS_LINE_STATUS_CREATED           0 /* created                  */
#define VOTS_LINE_STATUS_ACTIVE            1 /* line is active (open)    */
#define VOTS_LINE_STATUS_PASSIVE           2 /* line is passive (closed) */
#define VOTS_LINE_STATUS_BROKEN            3 /* line error               */
#define VOTS_LINE_STATUS_DISCONNECT        4 /* line disconnected        */
#define VOTS_LINE_STATUS_CLOSED            5 /* line deleted             */

#define VOTS_LOCAL                         0 /* client connection        */
#define VOTS_REMOTE                        1 /* unused                   */

#define VOTS_EVENT_ON                      1 /* event on                 */
#define VOTS_EVENT_OFF                  0x00 /* no event set             */
#define VOTS_EVENT_WAKEUP               0x01 /* wakeup                   */
#define VOTS_EVENT_SIM                  0x02 /* sim data set             */
#define VOTS_EVENT_AVL                  0x03 /* all events               */

#define VOTS_STEP_FNC_BEGIN                1 /* start of function        */
#define VOTS_STEP_FNC_EXIT                 2 /* end of function          */

#define VOTS_DOUBLE_TIMEVAL                0 /* double -> timeval        */
#define VOTS_TIMEVAL_DOUBLE                1 /* timeval -> double        */


/*
* parameter definitions
*/
#define VOTS_ENV_PARAM_FILE           "vots.ini"

/* basic data */
#define VOTS_PARAM_DEFAULT_SECTION    "default"
#define VOTS_PARAM_SECTION            "Line"
#define VOTS_PARAM_GROUPNAME          "Groupname"
#define VOTS_PARAM_CALLINGPORT        "CallingPort"
#define VOTS_PARAM_CALLINGTSAP        "CallingTSAP"
#define VOTS_PARAM_CALLEDPORT         "CalledPort"
#define VOTS_PARAM_CALLEDTSAP         "CalledTSAP"
#define VOTS_PARAM_IP                 "IPAddress"
#define VOTS_PARAM_ETHERNETADDRESS    "EthernetAddress"
#define VOTS_PARAM_IP_START           "StartString"
#define VOTS_PARAM_IP_END             "EndString"
#define VOTS_PARAM_IP_FILLCODE        "FillCode"
#define VOTS_PARAM_OPENTIMEOUTSEC     "OpenTimeoutSec"
#define VOTS_PARAM_OPENTIMEOUTUSEC    "OpenTimeoutUSec"
#define VOTS_PARAM_SENDTIMEOUTSEC     "SendTimeoutSec"
#define VOTS_PARAM_SENDTIMEOUTUSEC    "SendTimeoutUSec"
#define VOTS_PARAM_RECEIVETIMEOUTSEC  "ReceiveTimeoutSec"
#define VOTS_PARAM_RECEIVETIMEOUTUSEC "ReceiveTimeoutUSec"
#define VOTS_PARAM_LOGDELTATIMESEC    "LogDeltaTimeSec"
#define VOTS_PARAM_LOGDELTATIMEUSEC   "LogDeltaTimeUSec"
#define VOTS_PARAM_PROTOCOL_ENABLE    "Protocol"            /* 0 | 1 */
#define VOTS_PARAM_PROTOCOL_PREFIX    "ProtocolPrefix"
#define VOTS_PARAM_TRANSFERLENGTH     "TransferLength"      /* VOTS Block Size: default: 508, sync with SPS/PLC */

/* idendification of HW interface */
#define VOTS_PARAM_CALLEDAB           "CalledAB"
#define VOTS_PARAM_CALLEDBOSCH        "CalledBOSCH"

/* redefine old typedefs */
#define VOTS_int_typ                   SBI_int32_t
#define VOTS_pid_typ                   SBI_int32_t
#define VOTS_timeval_typ               SBI_timeVal_t
#define VOTS_gid_typ                   SBI_int32_t
#define VOTS_uid_typ                   SBI_int32_t

#if defined(__cplusplus)
extern "C" {
#endif
	/*
	* structs from version 1.x (no change)
	*/

#if !defined(VOTS_NODEFINE_V1_TYPES)
typedef struct vots_gruppe {
	SBI_int32_t   line_index;
	SBI_char_t    name[VOTS_NAME_LEN];
	SBI_int32_t   line_status;
	SBI_int32_t   remote;
	SBI_char_t    eth_addr[VOTS_ADDR_LEN];
} VOTS_gruppe_typ;

typedef struct vots_gruppen {
	SBI_int32_t      num_gruppen;
	VOTS_gruppe_typ *gruppe;
} VOTS_gruppen_typ;

typedef struct vots_call {                         /* last vots call           */
	SBI_timeVal_t call_time;                        /* timestamp                */
	SBI_int32_t   step;                             /* call step                */
	SBI_int32_t   termination_state;                /* return code              */
	SBI_char_t    syscall[VOTS_ADDR_LEN];           /* call name                */
} VOTS_call_typ;

typedef struct vots_statistik {                    /* call statistic           */
	SBI_timeVal_t  reset_time;                      /* timestamp reset          */
	SBI_int32_t    open_calls;                      /* # open                   */
	SBI_int32_t    open_success;                    /* # open (success)         */
	SBI_int32_t    trm_calls;                       /* # send calls             */
	SBI_int32_t    trm_messages;                    /* # send messages          */
	SBI_int32_t    trm_message_sim;                 /* # send messages (sim)    */
	SBI_int32_t    rec_calls;                       /* # receive calls          */
	SBI_int32_t    rec_messages;                    /* # receive messages       */
	SBI_int32_t    rec_message_sim;                 /* # receive messages (sim) */
} VOTS_statistik_typ;

typedef struct vots_prot {
	SBI_int32_t    mode;                            /* protocol mode            */
	SBI_int32_t    format;                          /* 80/132 chars per line    */
	SBI_char_t     prefix[VOTS_NAME_LEN];           /* prefix of filename       */
} VOTS_prot_typ;

typedef struct vots_msg {                          /* message struct (varchar) */
	SBI_int32_t    length;                          /* size of message data     */
	SBI_char_t     value[VOTS_MSG_LEN];             /* message data             */
} VOTS_msg_typ;

typedef struct vots_message {                      /* message trace            */
	SBI_int32_t    status;                          /* status of message (sim)  */
	VOTS_msg_typ   message;                         /* message data             */
} VOTS_message_typ;

typedef struct vots_line {
	SBI_char_t         gruppe[VOTS_NAME_LEN];       /* Gruppenname              */
	SBI_int32_t        line_status;                 /* Status der Line          */
	SBI_char_t         eth_addr[VOTS_ADDR_LEN];     /* sps address              */
	SBI_char_t         calling_tsap[VOTS_ADDR_LEN]; /* calling port             */
	SBI_char_t         called_tsap[VOTS_ADDR_LEN];  /* called port              */
	SBI_int32_t        remote;                      /* always local             */
	SBI_timeVal_t      open_timeout;                /* connection timeout       */
	SBI_timeVal_t      poll_timeout;                /* polling timeout          */
	SBI_timeVal_t      send_timeout;                /* send timeout             */
	SBI_timeVal_t      receive_timeout;             /* receive timeout          */
	SBI_int32_t        receive_event;               /* extern wakeup flag       */
	SBI_int32_t        lauf_nr;                     /* sequence of message      */
	VOTS_call_typ      vots_call;                   /* trace of vots call       */
	VOTS_statistik_typ statistik;                   /* interface statistic data */
	VOTS_prot_typ      protokoll;                   /* protocol of messages     */
	VOTS_message_typ   transmit_msg;                /* unused                   */
	VOTS_message_typ   receive_msg;                 /* unused                   */
	VOTS_message_typ   last_sim_msg;                /* unused                   */
	SBI_int32_t        pid;                         /* pid of line init process */
} VOTS_line_typ;
#endif  /* !defined(VOTS_NODEFINE_V1_TYPES) */



#if !defined(IDL_COMPILER)

typedef  SBI_int32_t       VOTS_int_typ;
typedef  SBI_int32_t       VOTS_pid_typ;
typedef  SBI_timeVal_t     VOTS_timeval_typ;
typedef  SBI_int32_t       VOTS_gid_typ;
typedef  SBI_int32_t       VOTS_uid_typ;

/*--- Datenstrukturen fuer das shared memory --------------------------------*/
/* Header fuer das shared memory */
typedef struct vots_shmHeader
{
	VOTS_timeval_typ create_time;					/* Zeitpunkt der Erzeugung des SHM   */
	VOTS_uid_typ creator_uid;						/* UID des Erzeugers                 */
	VOTS_gid_typ creator_gid;						/* GID des Erzeugers                 */
	VOTS_int_typ num_lines;							/* Anzahl Lines im SHM               */
	VOTS_int_typ version;							/* Versionsnummer                    */
} VOTS_shmHeader_typ;

/* shared memory Struktur */
typedef struct vots_shm
{
	VOTS_shmHeader_typ header;						/* Header Struktur                   */
	VOTS_line_typ line[1];						/* Array von Lines                   */
} VOTS_shm_typ;

/*--- Datenstrukturen fuer die TSI und Verbindungsfunktionen ----------------*/
/* Deskriptor fuer den shared memory Zugriff nur cc Compiler */
typedef struct vots_shmDes
{
	SBI_shmHandle_typ shmDes;	/* shared memory Deskriptor          */
	VOTS_shm_typ *shmPtr;		/* Zeiger auf die Datenstruktur im   */
								/* shared memory                     */
	//char shmFile[VOTS_FNAME_LEN];	/* Name der shared memory Datei      */
	VOTS_int_typ lineIndex;		/* Index der aktuellen Line          */
	//SBI_semId_typ semDes;		/* Deskriptor des aktuellen Line     */
								/* Semaphors                         */
}  VOTS_shmDes_typ;

/* VOTS Deskriptor fuer die komplette Line */
typedef struct vots_lineDes
{
	VOTS_int_typ       sfd;              /* Sender-Filedescriptor             */
	VOTS_int_typ       rfd;              /* Receiver-Filedescriptor           */
	VOTS_int_typ       mode;             /* Remote Flag VOTS_REMOTE,VOTS_LOCAL*/
	VOTS_int_typ       polling;          /* Flag, ob Polling aktiviert wurde  */
	VOTS_int_typ       useThreads;       /* read with treads (planned)        */
	//SBI_thread_typ     ctrlThread;       /* Struktur fuer Ueberwachungsthread */
	//SBI_thread_typ     pollThread;       /* Struktur fuer Pollingthread       */
	//SBI_mutex_typ      mainMutex;        /* Mutex fuer den Haupt Thread       */
	//SBI_mutex_typ      ctrlMutex;        /* Mutex fuer den Ueberwachungsthread*/
	//SBI_mutex_typ      pollMutex;        /* Mutex fuer den Pollingthread      */
	VOTS_int_typ       mainThreadAccept; /* Kontrolle fuer Hauptthread        */
	VOTS_int_typ       ctrlThreadStatus; /* Status Ueberwachungsthread        */
	VOTS_int_typ       ctrlThreadCtrl;   /* Kontrolle fuer Ueberwachungsthread*/
	VOTS_int_typ       pollThreadCtrl;   /* Kontrolle fuer Pollingthread      */
	VOTS_shmDes_typ   *vsd;              /* Deskriptor fuer den shared memory */
										 /* Zugriff                           */
	//SBI_tcpHandle_typ  tcpHndl;          /* TCP/IP Handle fuer TCP Connection */
	VOTS_int_typ       tcpLength;        /* aktuell zu lesende Bytes          */
	VOTS_int_typ       tcpMaxLength;     /* full blocksize of S5 send message */
	int                remPort;          /* Server port                       */
	int                locPort;          /* local Port (not used)             */
	//PCOhandle_typ      pcoHndl;          /* for Wakeup if useThreads is TRUE  */
	//VOTS_msg_typ       rcvMsg;           /* use for full message by tcp       */
	//char               startStringIp[VOTS_IP_START_LEN]; /*starting ip msg    */
	//char               endStringIp[VOTS_IP_START_LEN];   /*terminating ip msg */
	int                fillCode;         /* code for padding restmessage by ip*/
} VOTS_lineDes_typ;

#endif

#if defined(__cplusplus)
}
#endif


#endif /*  VOTS_DCE_H */